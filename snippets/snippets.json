{
	"DOTS: Creates Full File ComponentSystem": {
		"prefix": ":makesys",
		"body": [
			"using UnityEngine;",
			"using Unity.Entities;",
			"",
			"namespace ${1:MyPackage}.Systems",
			"{",
			"\tpublic class ${2:MySystem} : ComponentSystem",
			"\t{",
			"\t\tprivate EntityQuery group;",
			"",
			"\t\tprotected override void OnCreate()",
			"\t\t{",
			"\t\t\tthis.group = GetEntityQuery(",
			"\t\t\t\tComponentType.ReadWrite<Transform>()",
			"\t\t\t);",
			"",
			"\t\t\tthis.RequireForUpdate(this.group);",
			"\t\t}",
			"",
			"\t\tprotected override void OnUpdate()",
			"\t\t{",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Creates a full ComponentSystem"
	},

	"DOTS: Create Simple Query": {
		"prefix": ":querySimple",
		"body": [
			"this.${1:group} = GetEntityQuery(",
			"\tComponentType.ReadOnly<Transform>()",
			");"
		],
		"description": "Creates a Simple Query"
	},

	"DOTS: Create Complex Query": {
		"prefix": ":queryComplex",
		"body": [
			"this.${1:group} = GetEntityQuery(new EntityQueryDesc",
			"{",
			"\tAll = new []",
			"\t{",
			"\t\tComponentType.ReadOnly<MyComponent>(),",
			"\t},",
			"\tNone = new []",
			"\t{",
			"\t\tComponentType.ReadOnly<SubtractiveComponent>()",
			"\t},",
			"});"
		],
		"description": "Creates a Complex Query"
	},

	"DOTS: Add Group Query": {
		"prefix": ":group",
		"body": [
			"private EntityQuery ${1:group};"
		],
		"description": "Add Group Query"
	},

	"DOTS: Add Component Read": {
		"prefix": ":compRead",
		"body": [
			"ComponentType.ReadOnly<${1:MyComponent}>()"
		],
		"description": "Add Component Read"
	},

	"DOTS: Add Component Write": {
		"prefix": ":compWrite",
		"body": [
			"ComponentType.ReadWrite<${1:MyComponent}>()"
		],
		"description": "Add Component Write"
	},

	"DOTS: Require For Update": {
		"prefix": ":require",
		"body": [
			"this.RequireForUpdate(this.${1:group});"
		],
		"description": "Require For Update"
	},

	"DOTS: Create Type Definition": {
		"prefix": ":newType",
		"body": [
			"private ArchetypeChunkComponentType<${1:MyComponent}> ${2:myType};"
		],
		"description": "Creates Type Definition"
	},

	"DOTS: Create Entity Type Definition": {
		"prefix": ":newEntityType",
		"body": [
			"private ArchetypeChunkEntityType ${1:entityType};"
		],
		"description": "Creates Entity Type Definition"
	},

	"DOTS: Get Type": {
		"prefix": ":getType",
		"body": [
			"this.${1:myType} = this.GetArchetypeChunkComponentType<${2:MyComponent}>();"
		],
		"description": "Get Archetype Chunk Component Type"
	},

	"DOTS: Get Entity Type": {
		"prefix": ":getEntityType",
		"body": [
			"this.${1:entityType} = this.GetArchetypeChunkEntityType();"
		],
		"description": "Get Archetype Chunk Entity Type"
	},

	"DOTS: Create Chunk Iteration": {
		"prefix": ":chunkIteration",
		"body": [
			"NativeArray<ArchetypeChunk> chunks = this.${1:group}.CreateArchetypeChunkArray(Allocator.TempJob);",
			"for (int i = 0; i < chunks.Length; ++i)",
			"{",
			"\tthis.ProcessChunk(chunks[i]);",
			"}",
			"",
			"chunks.Dispose();"
		],
		"description": "Creates Chunk Iteration"
	},

	"DOTS: Chunk Get Native Array": {
		"prefix": ":chGetNative",
		"body": [
			"var ${1:typeArray} = chunk.GetNativeArray(this.${2:myType});"
		],
		"description": "Chunk Get Native Array"
	},

	"DOTS: Chunk Get Component Object": {
		"prefix": ":chGetObject",
		"body": [
			"var ${1:objComponent} = chunk.GetComponentObjects(this.${2:myType}, this.EntityManager);"
		],
		"description": "Chunk Get Component Object"
	},

	"DOTS: Chunk Get Shared Component": {
		"prefix": ":chGetShared",
		"body": [
			"var ${1:shared} = chunk.GetSharedComponentData(this.${2:myType}, this.EntityManager);"
		],
		"description": "Chunk Get Shared Component"
	},

	"DOTS: ForEach": {
		"prefix": ":forEach",
		"body": [
			"Entities.With(this.${1:group}).ForEach((${2:MyComponent} data) =>",
			"{",
			"\t${3}",
			"});"
		],
		"description": "ForEach Iteration"
	},

	"DOTS: ForEach With Entity": {
		"prefix": ":forEachEntity",
		"body": [
			"Entities.With(this.${1:group}).ForEach((Entity entity, ${2:MyComponent} data) =>",
			"{",
			"\t${3}",
			"});"
		],
		"description": "ForEach Iteration With Entity"
	},

	"DOTS: Process Chunk Function": {
		"prefix": ":chunkProcess",
		"body": [
			"private void ProcessChunk(ArchetypeChunk chunk)",
			"{",
			"\tfor (int ci = 0; ci < chunk.Count; ci++)",
			"\t{",
			"\t\t${1}",
			"\t}",
			"}"
		],
		"description": "Process Chunk Function"
	},

	"DOTS: Jobs Command Buffer": {
		"prefix": ":newCmdBuffer",
		"body": [
			"private BeginInitializationEntityCommandBufferSystem ${1:entityCommandBufferSystem};"
		],
		"description": "Jobs Command Buffer"
	},

	"DOTS: Jobs Get Command Buffer": {
		"prefix": ":getCmdBuffer",
		"body": [
			"this.${1:entityCommandBufferSystem} = World.GetOrCreateSystem<BeginInitializationEntityCommandBufferSystem>();"
		],
		"description": "Jobs Get Command Buffer"
	},

	"DOTS: Jobs Declare Command Buffer": {
		"prefix": ":declareCmdBuffer",
		"body": [
			"public EntityCommandBuffer.Concurrent ${1:commandBuffer}; // Remove [BurstCompile] from this Job"
		],
		"description": "Jobs Declare Command Buffer"
	},

	"DOTS: Jobs Use Command Buffer": {
		"prefix": ":useCmdBuffer",
		"body": [
			"${1:entityCommandBufferSystem}.CreateCommandBuffer().ToConcurrent()"
		],
		"description": "Jobs Use Command Buffer"
	},

	"DOTS: DeclareReferencedPrefabs function": {
		"prefix": ":refPrefabs",
		"body": [
			"// Requires interface: IDeclareReferencedPrefabs",
			"public void DeclareReferencedPrefabs(List<GameObject> gameObjects)",
			"{",
			"\tgameObjects.Add(${1:prefab});",
			"}"
		],
		"description": "DeclareReferencedPrefabs function"
	},

	"DOTS: Deallocate System Job": {
		"prefix": ":deallocateJob",
		"body": [
			"[BurstCompile]",
			"struct DeallocateSystemJob : IJob",
			"{",
			"\t[DeallocateOnJobCompletion][ReadOnly] public NativeArray<int> ${1:array};",
			"",
			"\tpublic void Execute() { }",
			"}"
		],
		"description": "Deallocate System Job Template"
	},

	"DOTS: IJob": {
		"prefix": ":job",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJob",
			"{",
			"\tpublic void Execute()",
			"\t{",
			"\t\t${2}",
			"\t}",
			"}"
		],
		"description": "Creates IJob struct"
	},

	"DOTS: IJobChunk": {
		"prefix": ":jobChunk",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobChunk",
			"{",
			"\tpublic void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)",
			"\t{",
			"\t\t${2}",
			"\t}",
			"}"
		],
		"description": "Creates IJobChunk struct"
	},

	"DOTS: IJobForEach": {
		"prefix": ":jobFor",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobForEach<${2:Translation}>",
			"{",
			"\tpublic void Execute([ReadOnly] ref ${3:Translation} ${4:translation})",
			"\t{",
			"\t\t${5}",
			"\t}",
			"}"
		],
		"description": "Creates IJobForEach struct"
	},

	"DOTS: IJobForEachWithEntity": {
		"prefix": ":jobForEntity",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobForEachWithEntity<${2:Translation}>",
			"{",
			"\tpublic void Execute(Entity entity, int index, [ReadOnly] ref ${3:Translation} ${4:translation})",
			"\t{",
			"\t\t${5}",
			"\t}",
			"}"
		],
		"description": "Creates IJobForEachWithEntity struct"
	},

	"DOTS: IJobParallelFor": {
		"prefix": ":jobParallel",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobParallelFor",
			"{",
			"\tpublic void Execute(int index)",
			"\t{",
			"\t\t${2}",
			"\t}",
			"}"
		],
		"description": "Creates IJobParallelFor struct"
	},

	"DOTS: IJobParallelForBatch": {
		"prefix": ":jobParallelBatch",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobParallelForBatch",
			"{",
			"\tpublic void Execute(int startIndex, int count)",
			"\t{",
			"\t\t${2}",
			"\t}",
			"}"
		],
		"description": "Creates IJobParallelForBatch struct"
	},

	"DOTS: IJobParallelForDefer": {
		"prefix": ":jobParallelDefer",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobParallelForDefer",
			"{",
			"\tpublic void Execute(int index)",
			"\t{",
			"\t\t${2}",
			"\t}",
			"}"
		],
		"description": "Creates IJobParallelForDefer struct"
	},

	"DOTS: IJobParallelForFilter": {
		"prefix": ":jobParallelFilter",
		"body": [
			"[BurstCompile]",
			"struct ${1:Name}SystemJob : IJobParallelForFilter",
			"{",
			"\tpublic void Execute(int index)",
			"\t{",
			"\t\t${2}",
			"\t}",
			"}"
		],
		"description": "Creates IJobParallelForFilter struct"
	}
}